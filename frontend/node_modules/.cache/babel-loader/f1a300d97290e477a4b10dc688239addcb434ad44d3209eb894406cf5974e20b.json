{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useTasks = username => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true); // Novo estado para carregamento\n\n  useEffect(() => {\n    const fetchTasks = async () => {\n      setLoading(true); // Inicia o carregamento\n      try {\n        const response = await fetch(`http://localhost:5000/api/tasks/${username}`);\n        if (response.ok) {\n          const data = await response.json();\n          setTasks(data);\n        } else {\n          throw new Error('Tarefas não encontradas');\n        }\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false); // Finaliza o carregamento\n      }\n    };\n    fetchTasks();\n  }, [username]);\n  return {\n    tasks,\n    error,\n    loading\n  }; // Retorna o estado de carregamento\n};\n_s(useTasks, \"rps4bXbImz3suq/KuqmaMzFZc2g=\");\nexport default useTasks;","map":{"version":3,"names":["useState","useEffect","useTasks","username","_s","tasks","setTasks","error","setError","loading","setLoading","fetchTasks","response","fetch","ok","data","json","Error","message"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/hooks/Tasks/useTasks.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useTasks = (username) => {\n  const [tasks, setTasks] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true); // Novo estado para carregamento\n\n  useEffect(() => {\n    const fetchTasks = async () => {\n      setLoading(true); // Inicia o carregamento\n      try {\n        const response = await fetch(`http://localhost:5000/api/tasks/${username}`);\n        if (response.ok) {\n          const data = await response.json();\n          setTasks(data);\n        } else {\n          throw new Error('Tarefas não encontradas');\n        }\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false); // Finaliza o carregamento\n      }\n    };\n\n    fetchTasks();\n  }, [username]);\n\n  return { tasks, error, loading }; // Retorna o estado de carregamento\n};\n\nexport default useTasks;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,QAAQ,GAAIC,QAAQ,IAAK;EAAAC,EAAA;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7BD,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;MAClB,IAAI;QACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmCV,QAAQ,EAAE,CAAC;QAC3E,IAAIS,QAAQ,CAACE,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UAClCV,QAAQ,CAACS,IAAI,CAAC;QAChB,CAAC,MAAM;UACL,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;QAC5C;MACF,CAAC,CAAC,OAAOV,KAAK,EAAE;QACdC,QAAQ,CAACD,KAAK,CAACW,OAAO,CAAC;MACzB,CAAC,SAAS;QACRR,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;IAEDC,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACR,QAAQ,CAAC,CAAC;EAEd,OAAO;IAAEE,KAAK;IAAEE,KAAK;IAAEE;EAAQ,CAAC,CAAC,CAAC;AACpC,CAAC;AAACL,EAAA,CA3BIF,QAAQ;AA6Bd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}