{"ast":null,"code":"var _jsxFileName = \"/Users/devcosta/Documents/task-manager/frontend/src/components/Header/TaskMenu.js\",\n  _s = $RefreshSig$();\n// TaskMenu.js\nimport React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport { FaTasks } from 'react-icons/fa';\nimport useClickOutside from '../../hooks/useClickOutside';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskMenu = ({\n  onViewTasks\n}) => {\n  _s();\n  const ref = useClickOutside(() => {\n    // Função para fechar o menu quando clicar fora\n    onViewTasks();\n  });\n\n  // Use useCallback para evitar que a função seja recriada em cada renderização\n  const handleClick = useCallback(e => {\n    e.stopPropagation();\n    onViewTasks();\n  }, [onViewTasks]);\n  return /*#__PURE__*/_jsxDEV(TaskMenuContainer, {\n    ref: ref,\n    children: /*#__PURE__*/_jsxDEV(TaskLink, {\n      onClick: handleClick,\n      children: [/*#__PURE__*/_jsxDEV(TaskIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), \"Gerenciar Tarefas\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskMenu, \"gVj3ClepAgXcHqV6Q6mPaoFBD9s=\", false, function () {\n  return [useClickOutside];\n});\n_c = TaskMenu;\nconst TaskMenuContainer = styled.div`\n  position: absolute;\n  top: 100%;\n  right: 0;\n  background-color: #1e1e1e;\n  border-radius: 10px;\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.4);\n  padding: 0.5rem;\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  z-index: 1000;\n  min-width: 200px;\n`;\n_c2 = TaskMenuContainer;\nconst TaskLink = styled.div`\n  color: #f0f0f0;\n  text-decoration: none;\n  padding: 0.75rem 1rem;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n\n  &:hover {\n    background-color: #2c2c2c;\n    transform: translateX(8px);\n  }\n\n  &:focus {\n    outline: 3px solid #1e90ff;\n    outline-offset: 4px;\n  }\n`;\n_c3 = TaskLink;\nconst TaskIcon = styled(FaTasks)`\n  margin-right: 0.5rem;\n  color: #ffdd57;\n`;\n_c4 = TaskIcon;\nexport default TaskMenu;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"TaskMenu\");\n$RefreshReg$(_c2, \"TaskMenuContainer\");\n$RefreshReg$(_c3, \"TaskLink\");\n$RefreshReg$(_c4, \"TaskIcon\");","map":{"version":3,"names":["React","useCallback","styled","FaTasks","useClickOutside","jsxDEV","_jsxDEV","TaskMenu","onViewTasks","_s","ref","handleClick","e","stopPropagation","TaskMenuContainer","children","TaskLink","onClick","TaskIcon","fileName","_jsxFileName","lineNumber","columnNumber","_c","div","_c2","_c3","_c4","$RefreshReg$"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/components/Header/TaskMenu.js"],"sourcesContent":["// TaskMenu.js\nimport React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport { FaTasks } from 'react-icons/fa';\nimport useClickOutside from '../../hooks/useClickOutside';\n\nconst TaskMenu = ({ onViewTasks }) => {\n  const ref = useClickOutside(() => {\n    // Função para fechar o menu quando clicar fora\n    onViewTasks();\n  });\n\n  // Use useCallback para evitar que a função seja recriada em cada renderização\n  const handleClick = useCallback((e) => {\n    e.stopPropagation();\n    onViewTasks();\n  }, [onViewTasks]);\n\n  return (\n    <TaskMenuContainer ref={ref}>\n      <TaskLink onClick={handleClick}>\n        <TaskIcon />\n        Gerenciar Tarefas\n      </TaskLink>\n    </TaskMenuContainer>\n  );\n};\n\nconst TaskMenuContainer = styled.div`\n  position: absolute;\n  top: 100%;\n  right: 0;\n  background-color: #1e1e1e;\n  border-radius: 10px;\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.4);\n  padding: 0.5rem;\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  z-index: 1000;\n  min-width: 200px;\n`;\n\nconst TaskLink = styled.div`\n  color: #f0f0f0;\n  text-decoration: none;\n  padding: 0.75rem 1rem;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n\n  &:hover {\n    background-color: #2c2c2c;\n    transform: translateX(8px);\n  }\n\n  &:focus {\n    outline: 3px solid #1e90ff;\n    outline-offset: 4px;\n  }\n`;\n\nconst TaskIcon = styled(FaTasks)`\n  margin-right: 0.5rem;\n  color: #ffdd57;\n`;\n\nexport default TaskMenu;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,OAAO,QAAQ,gBAAgB;AACxC,OAAOC,eAAe,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAMC,GAAG,GAAGN,eAAe,CAAC,MAAM;IAChC;IACAI,WAAW,CAAC,CAAC;EACf,CAAC,CAAC;;EAEF;EACA,MAAMG,WAAW,GAAGV,WAAW,CAAEW,CAAC,IAAK;IACrCA,CAAC,CAACC,eAAe,CAAC,CAAC;IACnBL,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,oBACEF,OAAA,CAACQ,iBAAiB;IAACJ,GAAG,EAAEA,GAAI;IAAAK,QAAA,eAC1BT,OAAA,CAACU,QAAQ;MAACC,OAAO,EAAEN,WAAY;MAAAI,QAAA,gBAC7BT,OAAA,CAACY,QAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,qBAEd;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAU;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAExB,CAAC;AAACb,EAAA,CApBIF,QAAQ;EAAA,QACAH,eAAe;AAAA;AAAAmB,EAAA,GADvBhB,QAAQ;AAsBd,MAAMO,iBAAiB,GAAGZ,MAAM,CAACsB,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAbIX,iBAAiB;AAevB,MAAME,QAAQ,GAAGd,MAAM,CAACsB,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACE,GAAA,GApBIV,QAAQ;AAsBd,MAAME,QAAQ,GAAGhB,MAAM,CAACC,OAAO,CAAC;AAChC;AACA;AACA,CAAC;AAACwB,GAAA,GAHIT,QAAQ;AAKd,eAAeX,QAAQ;AAAC,IAAAgB,EAAA,EAAAE,GAAA,EAAAC,GAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAL,EAAA;AAAAK,YAAA,CAAAH,GAAA;AAAAG,YAAA,CAAAF,GAAA;AAAAE,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}