{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport jwtDecode from 'jwt-decode'; // Corrija a importação se necessário\n\nexport const useAuth = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\n  const [userInfo, setUserInfo] = useState({\n    username: '',\n    email: '',\n    fullName: '',\n    createdAt: ''\n  });\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (token) {\n      // Decodifica o token para obter o ID do usuário\n      const decodedToken = jwtDecode(token);\n\n      // Busca as informações completas do usuário do servidor\n      const fetchUserInfo = async () => {\n        try {\n          const response = await fetch(`http://localhost:5000/api/users/${decodedToken.id}`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          if (!response.ok) {\n            throw new Error('Erro ao buscar informações do usuário');\n          }\n          const userData = await response.json();\n          setUserInfo({\n            username: userData.username,\n            email: userData.email,\n            fullName: userData.fullName,\n            createdAt: userData.createdAt\n          });\n        } catch (err) {\n          console.error('Erro ao buscar informações do usuário:', err);\n        }\n      };\n      fetchUserInfo();\n    }\n  }, [token]);\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Erro ao fazer login');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setToken(data.token);\n      navigate(`/tasks/${encodeURIComponent(userInfo.username)}`);\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao fazer login:', err);\n    }\n  };\n  const register = async (username, fullName, email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          fullName,\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Erro ao registrar');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setToken(data.token);\n      navigate(`/tasks/${encodeURIComponent(username)}`);\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao registrar:', err);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken('');\n    setUserInfo({\n      username: '',\n      email: '',\n      fullName: '',\n      createdAt: ''\n    });\n    navigate('/login');\n  };\n  return {\n    login,\n    register,\n    logout,\n    error,\n    token,\n    userInfo\n  };\n};\n_s(useAuth, \"Eb1IdNmcWETkUEwurOFX39YYEnA=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useState","useEffect","useNavigate","jwtDecode","useAuth","_s","error","setError","token","setToken","localStorage","getItem","userInfo","setUserInfo","username","email","fullName","createdAt","navigate","decodedToken","fetchUserInfo","response","fetch","id","headers","Authorization","ok","Error","userData","json","err","console","login","password","method","body","JSON","stringify","data","setItem","encodeURIComponent","message","register","errorData","logout","removeItem"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport jwtDecode from 'jwt-decode'; // Corrija a importação se necessário\n\nexport const useAuth = () => {\n  const [error, setError] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\n  const [userInfo, setUserInfo] = useState({\n    username: '',\n    email: '',\n    fullName: '',\n    createdAt: '',\n  });\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (token) {\n      // Decodifica o token para obter o ID do usuário\n      const decodedToken = jwtDecode(token);\n\n      // Busca as informações completas do usuário do servidor\n      const fetchUserInfo = async () => {\n        try {\n          const response = await fetch(`http://localhost:5000/api/users/${decodedToken.id}`, {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          });\n\n          if (!response.ok) {\n            throw new Error('Erro ao buscar informações do usuário');\n          }\n\n          const userData = await response.json();\n          setUserInfo({\n            username: userData.username,\n            email: userData.email,\n            fullName: userData.fullName,\n            createdAt: userData.createdAt,\n          });\n        } catch (err) {\n          console.error('Erro ao buscar informações do usuário:', err);\n        }\n      };\n\n      fetchUserInfo();\n    }\n  }, [token]);\n\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Erro ao fazer login');\n      }\n\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setToken(data.token);\n      navigate(`/tasks/${encodeURIComponent(userInfo.username)}`);\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao fazer login:', err);\n    }\n  };\n\n  const register = async (username, fullName, email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, fullName, email, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Erro ao registrar');\n      }\n\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setToken(data.token);\n      navigate(`/tasks/${encodeURIComponent(username)}`);\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao registrar:', err);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken('');\n    setUserInfo({\n      username: '',\n      email: '',\n      fullName: '',\n      createdAt: '',\n    });\n    navigate('/login');\n  };\n\n  return { login, register, logout, error, token, userInfo };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}