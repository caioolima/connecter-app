{"ast":null,"code":"var _s = $RefreshSig$();\n// hooks/useTasks.js\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nexport const useTasks = () => {\n  _s();\n  const {\n    username\n  } = useParams();\n  const [tasks, setTasks] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState({\n    firstName: '',\n    email: '',\n    createdAt: ''\n  });\n  const navigate = useNavigate();\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsAuthenticated(true);\n      try {\n        const decodedToken = jwtDecode(token);\n        const fullName = decodedToken.name || 'Nome não disponível';\n        const firstName = capitalizeFirstLetter(fullName.split(' ')[0]);\n        setUser({\n          firstName,\n          email: decodedToken.email || 'Email não disponível'\n        });\n        if (username !== firstName) {\n          navigate(`/tasks/${encodeURIComponent(firstName)}`);\n        }\n      } catch (error) {\n        console.error('Erro ao decodificar o token:', error);\n      }\n    } else {\n      const fetchUserInfo = async () => {\n        try {\n          const response = await fetch(`http://localhost:5000/api/users/user/${encodeURIComponent(username)}`);\n          if (response.ok) {\n            const data = await response.json();\n            setUser({\n              firstName: capitalizeFirstLetter(data.name),\n              email: data.email,\n              createdAt: data.createdAt\n            });\n          } else {\n            console.error('Erro ao carregar informações do usuário:', response.statusText);\n          }\n        } catch (error) {\n          console.error('Erro ao carregar informações do usuário:', error);\n        }\n      };\n      fetchUserInfo();\n    }\n    const fetchTasks = async () => {\n      try {\n        const apiUrl = isAuthenticated ? `http://localhost:5000/api/tasks/` : `http://localhost:5000/api/tasks/task/user/${encodeURIComponent(username)}`;\n        const response = await fetch(apiUrl, {\n          headers: isAuthenticated ? {\n            Authorization: `Bearer ${token}`\n          } : {}\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setTasks(data);\n        } else {\n          console.error('Erro ao carregar tarefas:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Erro ao carregar tarefas:', error);\n      }\n    };\n    fetchTasks();\n  }, [navigate, username, isAuthenticated]);\n  return {\n    tasks,\n    user,\n    isAuthenticated,\n    setTasks\n  };\n};\n_s(useTasks, \"PVQqH999oPU/PV1masZrY6ON74s=\", false, function () {\n  return [useParams, useNavigate];\n});\nconst capitalizeFirstLetter = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};","map":{"version":3,"names":["useEffect","useState","useNavigate","useParams","jwtDecode","useTasks","_s","username","tasks","setTasks","isAuthenticated","setIsAuthenticated","user","setUser","firstName","email","createdAt","navigate","token","localStorage","getItem","decodedToken","fullName","name","capitalizeFirstLetter","split","encodeURIComponent","error","console","fetchUserInfo","response","fetch","ok","data","json","statusText","fetchTasks","apiUrl","headers","Authorization","string","charAt","toUpperCase","slice"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/hooks/useTasks.js"],"sourcesContent":["// hooks/useTasks.js\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\n\nexport const useTasks = () => {\n  const { username } = useParams();\n  const [tasks, setTasks] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState({ firstName: '', email: '', createdAt: '' });\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      setIsAuthenticated(true);\n\n      try {\n        const decodedToken = jwtDecode(token);\n        const fullName = decodedToken.name || 'Nome não disponível';\n        const firstName = capitalizeFirstLetter(fullName.split(' ')[0]);\n\n        setUser({\n          firstName,\n          email: decodedToken.email || 'Email não disponível',\n        });\n\n        if (username !== firstName) {\n          navigate(`/tasks/${encodeURIComponent(firstName)}`);\n        }\n      } catch (error) {\n        console.error('Erro ao decodificar o token:', error);\n      }\n    } else {\n      const fetchUserInfo = async () => {\n        try {\n          const response = await fetch(`http://localhost:5000/api/users/user/${encodeURIComponent(username)}`);\n          if (response.ok) {\n            const data = await response.json();\n            setUser({\n              firstName: capitalizeFirstLetter(data.name),\n              email: data.email,\n              createdAt: data.createdAt,\n            });\n          } else {\n            console.error('Erro ao carregar informações do usuário:', response.statusText);\n          }\n        } catch (error) {\n          console.error('Erro ao carregar informações do usuário:', error);\n        }\n      };\n\n      fetchUserInfo();\n    }\n\n    const fetchTasks = async () => {\n      try {\n        const apiUrl = isAuthenticated \n          ? `http://localhost:5000/api/tasks/` \n          : `http://localhost:5000/api/tasks/task/user/${encodeURIComponent(username)}`;\n\n        const response = await fetch(apiUrl, {\n          headers: isAuthenticated ? { Authorization: `Bearer ${token}` } : {},\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          setTasks(data);\n        } else {\n          console.error('Erro ao carregar tarefas:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Erro ao carregar tarefas:', error);\n      }\n    };\n\n    fetchTasks();\n  }, [navigate, username, isAuthenticated]);\n\n  return { tasks, user, isAuthenticated, setTasks };\n};\n\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}