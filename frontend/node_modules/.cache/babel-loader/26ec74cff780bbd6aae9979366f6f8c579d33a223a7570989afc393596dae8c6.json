{"ast":null,"code":"var _jsxFileName = \"/Users/devcosta/Documents/task-manager/frontend/src/pages/TasksPage.js\",\n  _s = $RefreshSig$();\n// src/pages/TasksPage.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport jwtDecode from 'jwt-decode';\nimport UserWidget from '../components/Tasks/UserWidget';\nimport TasksWidget from '../components/Tasks/TasksWidget';\nimport TaskModal from '../components/Tasks/TaskModal';\nimport LoginModal from '../components/Tasks/LoginModal';\nimport { Container, WidgetsContainer } from '../styles/TaskModal.styles';\nimport { useTasks } from '../hooks/useTasks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TasksPage = () => {\n  _s();\n  const {\n    username\n  } = useParams();\n  const navigate = useNavigate();\n  const {\n    tasks,\n    fetchTasks,\n    handleViewTask\n  } = useTasks();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState({\n    firstName: '',\n    email: '',\n    createdAt: ''\n  });\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [showLoginModal, setShowLoginModal] = useState(false);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsAuthenticated(true);\n      try {\n        const decodedToken = jwtDecode(token);\n        const fullName = decodedToken.name || 'Nome não disponível';\n        const firstName = fullName.split(' ')[0].charAt(0).toUpperCase() + fullName.split(' ')[0].slice(1);\n        setUser({\n          firstName,\n          email: decodedToken.email || 'Email não disponível'\n        });\n        if (username !== firstName) {\n          navigate(`/tasks/${encodeURIComponent(firstName)}`);\n        }\n      } catch (error) {\n        console.error('Erro ao decodificar o token:', error);\n      }\n    } else {\n      // Fetch user info if not authenticated\n      const fetchUserInfo = async () => {\n        try {\n          const response = await fetch(`http://localhost:5000/api/users/user/${encodeURIComponent(username)}`);\n          if (response.ok) {\n            const data = await response.json();\n            setUser({\n              firstName: data.name.charAt(0).toUpperCase() + data.name.slice(1),\n              email: data.email,\n              createdAt: data.createdAt\n            });\n          } else {\n            console.error('Erro ao carregar informações do usuário:', response.statusText);\n          }\n        } catch (error) {\n          console.error('Erro ao carregar informações do usuário:', error);\n        }\n      };\n      fetchUserInfo();\n    }\n    fetchTasks(isAuthenticated, username, token);\n  }, [isAuthenticated, navigate, username, fetchTasks]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(WidgetsContainer, {\n      children: [/*#__PURE__*/_jsxDEV(UserWidget, {\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TasksWidget, {\n        tasks: tasks,\n        handleViewTask: handleViewTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), selectedTask && /*#__PURE__*/_jsxDEV(TaskModal, {\n      selectedTask: selectedTask,\n      onClose: () => setSelectedTask(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 24\n    }, this), showLoginModal && /*#__PURE__*/_jsxDEV(LoginModal, {\n      onClose: () => setShowLoginModal(false),\n      onLogin: () => navigate('/login')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(TasksPage, \"T91Ca739imJ5druSwvb5je/9feo=\", false, function () {\n  return [useParams, useNavigate, useTasks];\n});\n_c = TasksPage;\nexport default TasksPage;\nvar _c;\n$RefreshReg$(_c, \"TasksPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","jwtDecode","UserWidget","TasksWidget","TaskModal","LoginModal","Container","WidgetsContainer","useTasks","jsxDEV","_jsxDEV","TasksPage","_s","username","navigate","tasks","fetchTasks","handleViewTask","isAuthenticated","setIsAuthenticated","user","setUser","firstName","email","createdAt","selectedTask","setSelectedTask","showLoginModal","setShowLoginModal","token","localStorage","getItem","decodedToken","fullName","name","split","charAt","toUpperCase","slice","encodeURIComponent","error","console","fetchUserInfo","response","fetch","ok","data","json","statusText","children","fileName","_jsxFileName","lineNumber","columnNumber","onClose","onLogin","_c","$RefreshReg$"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/pages/TasksPage.js"],"sourcesContent":["// src/pages/TasksPage.jsx\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport jwtDecode from 'jwt-decode';\nimport UserWidget from '../components/Tasks/UserWidget';\nimport TasksWidget from '../components/Tasks/TasksWidget';\nimport TaskModal from '../components/Tasks/TaskModal';\nimport LoginModal from '../components/Tasks/LoginModal';\nimport { Container, WidgetsContainer } from '../styles/TaskModal.styles';\nimport { useTasks } from '../hooks/useTasks';\n\nconst TasksPage = () => {\n  const { username } = useParams();\n  const navigate = useNavigate();\n  const { tasks, fetchTasks, handleViewTask } = useTasks();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState({ firstName: '', email: '', createdAt: '' });\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [showLoginModal, setShowLoginModal] = useState(false);\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsAuthenticated(true);\n      try {\n        const decodedToken = jwtDecode(token);\n        const fullName = decodedToken.name || 'Nome não disponível';\n        const firstName = fullName.split(' ')[0].charAt(0).toUpperCase() + fullName.split(' ')[0].slice(1);\n\n        setUser({\n          firstName,\n          email: decodedToken.email || 'Email não disponível',\n        });\n\n        if (username !== firstName) {\n          navigate(`/tasks/${encodeURIComponent(firstName)}`);\n        }\n      } catch (error) {\n        console.error('Erro ao decodificar o token:', error);\n      }\n    } else {\n      // Fetch user info if not authenticated\n      const fetchUserInfo = async () => {\n        try {\n          const response = await fetch(`http://localhost:5000/api/users/user/${encodeURIComponent(username)}`);\n          if (response.ok) {\n            const data = await response.json();\n            setUser({\n              firstName: data.name.charAt(0).toUpperCase() + data.name.slice(1),\n              email: data.email,\n              createdAt: data.createdAt,\n            });\n          } else {\n            console.error('Erro ao carregar informações do usuário:', response.statusText);\n          }\n        } catch (error) {\n          console.error('Erro ao carregar informações do usuário:', error);\n        }\n      };\n      fetchUserInfo();\n    }\n    fetchTasks(isAuthenticated, username, token);\n  }, [isAuthenticated, navigate, username, fetchTasks]);\n\n  return (\n    <Container>\n      <WidgetsContainer>\n        <UserWidget user={user} />\n        <TasksWidget tasks={tasks} handleViewTask={handleViewTask} />\n      </WidgetsContainer>\n\n      {selectedTask && <TaskModal selectedTask={selectedTask} onClose={() => setSelectedTask(null)} />}\n\n      {showLoginModal && (\n        <LoginModal onClose={() => setShowLoginModal(false)} onLogin={() => navigate('/login')} />\n      )}\n    </Container>\n  );\n};\n\nexport default TasksPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}