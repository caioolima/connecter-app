{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useTaskAPI.js\nimport { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../../Context/AuthContext';\nconst useTaskAPI = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    token,\n    userInfo\n  } = useAuth();\n  const fetchTasks = useCallback(async () => {\n    if (!token || !(userInfo !== null && userInfo !== void 0 && userInfo.username)) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`https://connecter-app-production.up.railway.app/api/manager/tasks/${userInfo.username}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error('Erro ao buscar tarefas');\n      const data = await response.json();\n      setTasks(data);\n    } catch (error) {\n      setError(error.message);\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  }, [token, userInfo === null || userInfo === void 0 ? void 0 : userInfo.username]);\n  useEffect(() => {\n    fetchTasks();\n  }, [fetchTasks]);\n  const saveTask = async task => {\n    try {\n      const method = task.id ? 'PUT' : 'POST';\n      const url = task.id ? `https://connecter-app-production.up.railway.app/api/manager/tasks/${task.id}` : 'https://connecter-app-production.up.railway.app/api/manager/tasks';\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify(task)\n      });\n      if (!response.ok) throw new Error('Erro ao salvar tarefa');\n      await response.json();\n      fetchTasks(); // Atualize a lista de tarefas\n    } catch (error) {\n      setError(error.message);\n      console.error(error);\n    }\n  };\n  const completeTask = async taskId => {\n    try {\n      const response = await fetch(`https://connecter-app-production.up.railway.app/api/manager/tasks/${taskId}/complete`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error('Erro ao marcar tarefa como concluída');\n      await response.json();\n      fetchTasks(); // Atualize a lista de tarefas\n    } catch (error) {\n      setError(error.message);\n      console.error(error);\n    }\n  };\n  const deleteTask = async taskId => {\n    try {\n      const response = await fetch(`https://connecter-app-production.up.railway.app/api/manager/tasks/${taskId}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error('Erro ao excluir tarefa');\n      fetchTasks(); // Atualize a lista de tarefas\n    } catch (error) {\n      setError(error.message);\n      console.error(error);\n    }\n  };\n  return {\n    tasks,\n    loading,\n    error,\n    fetchTasks,\n    saveTask,\n    completeTask,\n    deleteTask\n  };\n};\n_s(useTaskAPI, \"yIH4A4GgDCrYDI27Dt/JbVMt+Es=\", false, function () {\n  return [useAuth];\n});\nexport default useTaskAPI;","map":{"version":3,"names":["useState","useEffect","useCallback","useAuth","useTaskAPI","_s","tasks","setTasks","loading","setLoading","error","setError","token","userInfo","fetchTasks","username","response","fetch","headers","Authorization","ok","Error","data","json","message","console","saveTask","task","method","id","url","body","JSON","stringify","completeTask","taskId","deleteTask"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/hooks/Manager Hooks/useTaskApi.js"],"sourcesContent":["// src/hooks/useTaskAPI.js\nimport { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../../Context/AuthContext';\n\nconst useTaskAPI = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const { token, userInfo } = useAuth();\n\n  const fetchTasks = useCallback(async () => {\n    if (!token || !userInfo?.username) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`https://connecter-app-production.up.railway.app/api/manager/tasks/${userInfo.username}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error('Erro ao buscar tarefas');\n      const data = await response.json();\n      setTasks(data);\n    } catch (error) {\n      setError(error.message);\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  }, [token, userInfo?.username]);\n\n  useEffect(() => {\n    fetchTasks();\n  }, [fetchTasks]);\n\n  const saveTask = async (task) => {\n    try {\n      const method = task.id ? 'PUT' : 'POST';\n      const url = task.id\n        ? `https://connecter-app-production.up.railway.app/api/manager/tasks/${task.id}`\n        : 'https://connecter-app-production.up.railway.app/api/manager/tasks';\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(task),\n      });\n\n      if (!response.ok) throw new Error('Erro ao salvar tarefa');\n      await response.json();\n      fetchTasks(); // Atualize a lista de tarefas\n    } catch (error) {\n      setError(error.message);\n      console.error(error);\n    }\n  };\n\n  const completeTask = async (taskId) => {\n    try {\n      const response = await fetch(`https://connecter-app-production.up.railway.app/api/manager/tasks/${taskId}/complete`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) throw new Error('Erro ao marcar tarefa como concluída');\n      await response.json();\n      fetchTasks(); // Atualize a lista de tarefas\n    } catch (error) {\n      setError(error.message);\n      console.error(error);\n    }\n  };\n\n  const deleteTask = async (taskId) => {\n    try {\n      const response = await fetch(`https://connecter-app-production.up.railway.app/api/manager/tasks/${taskId}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) throw new Error('Erro ao excluir tarefa');\n      fetchTasks(); // Atualize a lista de tarefas\n    } catch (error) {\n      setError(error.message);\n      console.error(error);\n    }\n  };\n\n  return {\n    tasks,\n    loading,\n    error,\n    fetchTasks,\n    saveTask,\n    completeTask,\n    deleteTask,\n  };\n};\n\nexport default useTaskAPI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}