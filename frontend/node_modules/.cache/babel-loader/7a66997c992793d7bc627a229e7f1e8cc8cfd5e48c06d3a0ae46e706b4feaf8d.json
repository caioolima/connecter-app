{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '../../Context/AuthContext';\n\n// Hook personalizado para gerenciar tarefas com a API\nconst useTasksApi = () => {\n  _s();\n  // Estados para armazenar as tarefas, o filtro, o status de carregamento, a tarefa atual e o estado do modal\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('all');\n  const [loading, setLoading] = useState(true);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n\n  // Obtém o token e as informações do usuário do contexto de autenticação\n  const {\n    token,\n    userInfo\n  } = useAuth();\n\n  // Função para buscar tarefas da API\n  const fetchTasks = async () => {\n    if (!token || !(userInfo !== null && userInfo !== void 0 && userInfo.username)) return; // Verifica se o token e o username estão disponíveis\n\n    setLoading(true); // Define o status de carregamento como verdadeiro\n    try {\n      const response = await fetch(`https://connecter-app-production.up.railway.app/api/manager/tasks/${userInfo.username}`, {\n        headers: {\n          Authorization: `Bearer ${token}` // Inclui o token de autorização no cabeçalho\n        }\n      });\n      if (!response.ok) throw new Error('Erro ao buscar tarefas'); // Lança erro se a resposta não for ok\n      const data = await response.json(); // Converte a resposta em JSON\n      setTasks(data); // Atualiza o estado com as tarefas recebidas\n    } catch (error) {\n      console.error(error); // Registra qualquer erro no console\n    } finally {\n      setLoading(false); // Define o status de carregamento como falso, independentemente do sucesso ou falha\n    }\n  };\n\n  // Efeito para buscar tarefas sempre que o token ou o username mudar\n  useEffect(() => {\n    fetchTasks();\n  }, [token, userInfo === null || userInfo === void 0 ? void 0 : userInfo.username]);\n\n  // Função para abrir o modal de adição/edição de tarefas\n  const handleAddTaskClick = () => {\n    setCurrentTask(null); // Reseta a tarefa atual\n    setModalOpen(true); // Abre o modal\n  };\n\n  // Função para salvar uma tarefa (adicionar ou editar)\n  const handleSaveTask = async task => {\n    try {\n      const method = currentTask ? 'PUT' : 'POST'; // Define o método HTTP com base na existência de uma tarefa atual\n      const url = currentTask ? `https://connecter-app-production.up.railway.app/api/manager/tasks/${currentTask.id}` : 'https://connecter-app-production.up.railway.app/api/manager/tasks';\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}` // Inclui o token de autorização no cabeçalho\n        },\n        body: JSON.stringify(task) // Envia a tarefa no corpo da requisição\n      });\n      if (!response.ok) throw new Error('Erro ao salvar tarefa'); // Lança erro se a resposta não for ok\n      await response.json(); // Converte a resposta em JSON\n\n      fetchTasks(); // Recarrega as tarefas\n      setModalOpen(false); // Fecha o modal\n      setCurrentTask(null); // Reseta a tarefa atual\n    } catch (error) {\n      console.error(error); // Registra qualquer erro no console\n    }\n  };\n\n  // Função para marcar uma tarefa como concluída\n  const handleCompleteTask = async taskId => {\n    try {\n      const response = await fetch(`https://connecter-app-production.up.railway.app/api/manager/tasks/${taskId}/complete`, {\n        method: 'PATCH',\n        // Usa o método PATCH para atualizar a tarefa\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}` // Inclui o token de autorização no cabeçalho\n        }\n      });\n      if (!response.ok) throw new Error('Erro ao marcar tarefa como concluída'); // Lança erro se a resposta não for ok\n      await response.json(); // Converte a resposta em JSON\n\n      fetchTasks(); // Recarrega as tarefas\n    } catch (error) {\n      console.error(error); // Registra qualquer erro no console\n    }\n  };\n\n  // Função para excluir uma tarefa\n  const handleDeleteTask = async taskId => {\n    try {\n      const response = await fetch(`https://connecter-app-production.up.railway.app/api/manager/tasks/${taskId}`, {\n        method: 'DELETE',\n        // Usa o método DELETE para excluir a tarefa\n        headers: {\n          Authorization: `Bearer ${token}` // Inclui o token de autorização no cabeçalho\n        }\n      });\n      if (!response.ok) throw new Error('Erro ao excluir tarefa'); // Lança erro se a resposta não for ok\n      fetchTasks(); // Recarrega as tarefas\n    } catch (error) {\n      console.error(error); // Registra qualquer erro no console\n    }\n  };\n\n  // Filtra as tarefas com base no filtro selecionado\n  const filteredTasks = tasks.filter(task => {\n    if (filter === 'completed') return task.taskStatus; // Retorna apenas tarefas concluídas\n    if (filter === 'pending') return !task.taskStatus; // Retorna apenas tarefas pendentes\n    return true; // Retorna todas as tarefas se o filtro for 'all'\n  });\n\n  // Retorna os estados e funções necessários para o gerenciamento de tarefas\n  return {\n    tasks: filteredTasks,\n    loading,\n    modalOpen,\n    currentTask,\n    filter,\n    setFilter,\n    setModalOpen,\n    setCurrentTask,\n    handleAddTaskClick,\n    handleSaveTask,\n    handleCompleteTask,\n    handleDeleteTask\n  };\n};\n_s(useTasksApi, \"m4gDtOVmaczFGNovfOxuz4bIZiw=\", false, function () {\n  return [useAuth];\n});\nexport default useTasksApi;","map":{"version":3,"names":["useState","useEffect","useAuth","useTasksApi","_s","tasks","setTasks","filter","setFilter","loading","setLoading","currentTask","setCurrentTask","modalOpen","setModalOpen","token","userInfo","fetchTasks","username","response","fetch","headers","Authorization","ok","Error","data","json","error","console","handleAddTaskClick","handleSaveTask","task","method","url","id","body","JSON","stringify","handleCompleteTask","taskId","handleDeleteTask","filteredTasks","taskStatus"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/hooks/Manager Hooks/useTaskApi.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useAuth } from '../../Context/AuthContext';\n\n// Hook personalizado para gerenciar tarefas com a API\nconst useTasksApi = () => {\n  // Estados para armazenar as tarefas, o filtro, o status de carregamento, a tarefa atual e o estado do modal\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('all');\n  const [loading, setLoading] = useState(true);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  \n  // Obtém o token e as informações do usuário do contexto de autenticação\n  const { token, userInfo } = useAuth();\n\n  // Função para buscar tarefas da API\n  const fetchTasks = async () => {\n    if (!token || !userInfo?.username) return; // Verifica se o token e o username estão disponíveis\n    \n    setLoading(true); // Define o status de carregamento como verdadeiro\n    try {\n      const response = await fetch(`https://connecter-app-production.up.railway.app/api/manager/tasks/${userInfo.username}`, {\n        headers: {\n          Authorization: `Bearer ${token}`, // Inclui o token de autorização no cabeçalho\n        },\n      });\n      \n      if (!response.ok) throw new Error('Erro ao buscar tarefas'); // Lança erro se a resposta não for ok\n      const data = await response.json(); // Converte a resposta em JSON\n      setTasks(data); // Atualiza o estado com as tarefas recebidas\n    } catch (error) {\n      console.error(error); // Registra qualquer erro no console\n    } finally {\n      setLoading(false); // Define o status de carregamento como falso, independentemente do sucesso ou falha\n    }\n  };\n\n  // Efeito para buscar tarefas sempre que o token ou o username mudar\n  useEffect(() => {\n    fetchTasks();\n  }, [token, userInfo?.username]);\n\n  // Função para abrir o modal de adição/edição de tarefas\n  const handleAddTaskClick = () => {\n    setCurrentTask(null); // Reseta a tarefa atual\n    setModalOpen(true); // Abre o modal\n  };\n\n  // Função para salvar uma tarefa (adicionar ou editar)\n  const handleSaveTask = async (task) => {\n    try {\n      const method = currentTask ? 'PUT' : 'POST'; // Define o método HTTP com base na existência de uma tarefa atual\n      const url = currentTask\n        ? `https://connecter-app-production.up.railway.app/api/manager/tasks/${currentTask.id}`\n        : 'https://connecter-app-production.up.railway.app/api/manager/tasks';\n      \n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`, // Inclui o token de autorização no cabeçalho\n        },\n        body: JSON.stringify(task), // Envia a tarefa no corpo da requisição\n      });\n\n      if (!response.ok) throw new Error('Erro ao salvar tarefa'); // Lança erro se a resposta não for ok\n      await response.json(); // Converte a resposta em JSON\n\n      fetchTasks(); // Recarrega as tarefas\n      setModalOpen(false); // Fecha o modal\n      setCurrentTask(null); // Reseta a tarefa atual\n    } catch (error) {\n      console.error(error); // Registra qualquer erro no console\n    }\n  };\n\n  // Função para marcar uma tarefa como concluída\n  const handleCompleteTask = async (taskId) => {\n    try {\n      const response = await fetch(`https://connecter-app-production.up.railway.app/api/manager/tasks/${taskId}/complete`, {\n        method: 'PATCH', // Usa o método PATCH para atualizar a tarefa\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`, // Inclui o token de autorização no cabeçalho\n        },\n      });\n\n      if (!response.ok) throw new Error('Erro ao marcar tarefa como concluída'); // Lança erro se a resposta não for ok\n      await response.json(); // Converte a resposta em JSON\n\n      fetchTasks(); // Recarrega as tarefas\n    } catch (error) {\n      console.error(error); // Registra qualquer erro no console\n    }\n  };\n\n  // Função para excluir uma tarefa\n  const handleDeleteTask = async (taskId) => {\n    try {\n      const response = await fetch(`https://connecter-app-production.up.railway.app/api/manager/tasks/${taskId}`, {\n        method: 'DELETE', // Usa o método DELETE para excluir a tarefa\n        headers: {\n          Authorization: `Bearer ${token}`, // Inclui o token de autorização no cabeçalho\n        },\n      });\n\n      if (!response.ok) throw new Error('Erro ao excluir tarefa'); // Lança erro se a resposta não for ok\n      fetchTasks(); // Recarrega as tarefas\n    } catch (error) {\n      console.error(error); // Registra qualquer erro no console\n    }\n  };\n\n  // Filtra as tarefas com base no filtro selecionado\n  const filteredTasks = tasks.filter(task => {\n    if (filter === 'completed') return task.taskStatus; // Retorna apenas tarefas concluídas\n    if (filter === 'pending') return !task.taskStatus; // Retorna apenas tarefas pendentes\n    return true; // Retorna todas as tarefas se o filtro for 'all'\n  });\n\n  // Retorna os estados e funções necessários para o gerenciamento de tarefas\n  return {\n    tasks: filteredTasks,\n    loading,\n    modalOpen,\n    currentTask,\n    filter,\n    setFilter,\n    setModalOpen,\n    setCurrentTask,\n    handleAddTaskClick,\n    handleSaveTask,\n    handleCompleteTask,\n    handleDeleteTask,\n  };\n};\n\nexport default useTasksApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}