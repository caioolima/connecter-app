{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nexport const useAuth = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\n  const [userInfo, setUserInfo] = useState({\n    username: '',\n    email: '',\n    fullName: '',\n    createdAt: ''\n  });\n  const [verificAuth, setIsVerificAuth] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const checkAuth = () => {\n      if (token) {\n        try {\n          const decodedToken = jwtDecode(token);\n          setUserInfo({\n            username: decodedToken.username || '',\n            email: decodedToken.email || '',\n            fullName: decodedToken.fullName || '',\n            createdAt: decodedToken.createdAt || ''\n          });\n          setIsVerificAuth(true);\n        } catch (error) {\n          console.error('Erro ao decodificar o token', error);\n          localStorage.removeItem('token');\n          setToken('');\n          setUserInfo({\n            username: '',\n            email: '',\n            fullName: '',\n            createdAt: ''\n          });\n          setIsVerificAuth(false);\n        }\n      } else {\n        setUserInfo({\n          username: '',\n          email: '',\n          fullName: '',\n          createdAt: ''\n        });\n        setIsVerificAuth(false);\n      }\n    };\n    checkAuth();\n  }, [token]);\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Erro ao fazer login');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setToken(data.token);\n      const decodedToken = jwtDecode(data.token);\n      setUserInfo({\n        username: decodedToken.username || '',\n        email: decodedToken.email || '',\n        fullName: decodedToken.fullName || '',\n        createdAt: decodedToken.createdAt || ''\n      });\n      setIsVerificAuth(true);\n      s;\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao fazer login:', err);\n    }\n  };\n  const register = async (username, fullName, email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          fullName,\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Erro ao registrar');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setToken(data.token);\n      const decodedToken = jwtDecode(data.token);\n      setUserInfo({\n        username: decodedToken.username || '',\n        email: decodedToken.email || '',\n        fullName: decodedToken.fullName || '',\n        createdAt: decodedToken.createdAt || ''\n      });\n      setIsVerificAuth(true);\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao registrar:', err);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken('');\n    setUserInfo({\n      username: '',\n      email: '',\n      fullName: '',\n      createdAt: ''\n    });\n    setIsVerificAuth(false);\n    navigate('/login');\n  };\n  return {\n    login,\n    register,\n    logout,\n    error,\n    token,\n    userInfo,\n    verificAuth\n  };\n};\n_s(useAuth, \"oVgtcUPOxrfVMrrVGZVUYc3AOnM=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useState","useEffect","useNavigate","jwtDecode","useAuth","_s","error","setError","token","setToken","localStorage","getItem","userInfo","setUserInfo","username","email","fullName","createdAt","verificAuth","setIsVerificAuth","navigate","checkAuth","decodedToken","console","removeItem","login","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","setItem","s","err","message","register","errorData","logout"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\n\nexport const useAuth = () => {\n  const [error, setError] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\n  const [userInfo, setUserInfo] = useState({\n    username: '',\n    email: '',\n    fullName: '',\n    createdAt: '',\n  });\n  const [verificAuth, setIsVerificAuth] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const checkAuth = () => {\n      if (token) {\n        try {\n          const decodedToken = jwtDecode(token);\n          setUserInfo({\n            username: decodedToken.username || '',\n            email: decodedToken.email || '',\n            fullName: decodedToken.fullName || '',\n            createdAt: decodedToken.createdAt || '',\n          });\n          setIsVerificAuth(true);\n        } catch (error) {\n          console.error('Erro ao decodificar o token', error);\n          localStorage.removeItem('token');\n          setToken('');\n          setUserInfo({\n            username: '',\n            email: '',\n            fullName: '',\n            createdAt: '',\n          });\n          setIsVerificAuth(false);\n        }\n      } else {\n        setUserInfo({\n          username: '',\n          email: '',\n          fullName: '',\n          createdAt: '',\n        });\n        setIsVerificAuth(false);\n      }\n    };\n    checkAuth();\n  }, [token]);\n\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Erro ao fazer login');\n      }\n\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setToken(data.token);\n\n      const decodedToken = jwtDecode(data.token);\n      setUserInfo({\n        username: decodedToken.username || '',\n        email: decodedToken.email || '',\n        fullName: decodedToken.fullName || '',\n        createdAt: decodedToken.createdAt || '',\n      });\n      setIsVerificAuth(true);s\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao fazer login:', err);\n    }\n  };\n\n  const register = async (username, fullName, email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, fullName, email, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Erro ao registrar');\n      }\n\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setToken(data.token);\n\n      const decodedToken = jwtDecode(data.token);\n      setUserInfo({\n        username: decodedToken.username || '',\n        email: decodedToken.email || '',\n        fullName: decodedToken.fullName || '',\n        createdAt: decodedToken.createdAt || '',\n      });\n      setIsVerificAuth(true);\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao registrar:', err);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken('');\n    setUserInfo({\n      username: '',\n      email: '',\n      fullName: '',\n      createdAt: '',\n    });\n    setIsVerificAuth(false);\n    navigate('/login');\n  };\n\n  return { login, register, logout, error, token, userInfo, verificAuth };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}