{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\n\n// Hook personalizado para gerenciar o estado de um formulário\nexport const useFormState = (initialState = {}) => {\n  _s();\n  // Estado para armazenar os valores dos campos do formulário\n  const [formValues, setFormValues] = useState(initialState);\n\n  // Estado para armazenar mensagens de erro do formulário\n  const [formError, setFormError] = useState('');\n\n  // Função para lidar com mudanças nos campos do formulário\n  const handleInputChange = e => {\n    // Extrai o nome e o valor do campo alterado\n    const {\n      name,\n      value\n    } = e.target;\n\n    // Atualiza o estado dos valores do formulário\n    setFormValues(prevValues => ({\n      ...prevValues,\n      [name]: value\n    }));\n  };\n\n  // Função para definir uma mensagem de erro\n  const setError = error => {\n    setFormError(error);\n  };\n\n  // Função para limpar a mensagem de erro\n  const clearError = () => {\n    setFormError('');\n  };\n\n  // Retorna os valores do formulário, mensagens de erro e funções para manipulação\n  return {\n    formValues,\n    formError,\n    handleInputChange,\n    setError,\n    clearError\n  };\n};\n_s(useFormState, \"3UUDF0F+pT2QpC2p+C3V4ztAngc=\");","map":{"version":3,"names":["useState","useFormState","initialState","_s","formValues","setFormValues","formError","setFormError","handleInputChange","e","name","value","target","prevValues","setError","error","clearError"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/hooks/useFormStates.js"],"sourcesContent":["import { useState } from 'react';\n\n// Hook personalizado para gerenciar o estado de um formulário\nexport const useFormState = (initialState = {}) => {\n  // Estado para armazenar os valores dos campos do formulário\n  const [formValues, setFormValues] = useState(initialState);\n  \n  // Estado para armazenar mensagens de erro do formulário\n  const [formError, setFormError] = useState('');\n\n  // Função para lidar com mudanças nos campos do formulário\n  const handleInputChange = (e) => {\n    // Extrai o nome e o valor do campo alterado\n    const { name, value } = e.target;\n    \n    // Atualiza o estado dos valores do formulário\n    setFormValues((prevValues) => ({\n      ...prevValues,\n      [name]: value,\n    }));\n  };\n\n  // Função para definir uma mensagem de erro\n  const setError = (error) => {\n    setFormError(error);\n  };\n\n  // Função para limpar a mensagem de erro\n  const clearError = () => {\n    setFormError('');\n  };\n\n  // Retorna os valores do formulário, mensagens de erro e funções para manipulação\n  return {\n    formValues,\n    formError,\n    handleInputChange,\n    setError,\n    clearError,\n  };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AACA,OAAO,MAAMC,YAAY,GAAGA,CAACC,YAAY,GAAG,CAAC,CAAC,KAAK;EAAAC,EAAA;EACjD;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAACE,YAAY,CAAC;;EAE1D;EACA,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA,MAAMQ,iBAAiB,GAAIC,CAAC,IAAK;IAC/B;IACA,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;;IAEhC;IACAP,aAAa,CAAEQ,UAAU,KAAM;MAC7B,GAAGA,UAAU;MACb,CAACH,IAAI,GAAGC;IACV,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMG,QAAQ,GAAIC,KAAK,IAAK;IAC1BR,YAAY,CAACQ,KAAK,CAAC;EACrB,CAAC;;EAED;EACA,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvBT,YAAY,CAAC,EAAE,CAAC;EAClB,CAAC;;EAED;EACA,OAAO;IACLH,UAAU;IACVE,SAAS;IACTE,iBAAiB;IACjBM,QAAQ;IACRE;EACF,CAAC;AACH,CAAC;AAACb,EAAA,CArCWF,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}