{"ast":null,"code":"// api.js\nconst API_URL = 'http://localhost:5000/api/tasks/';\nconst getAuthHeaders = () => ({\n  Authorization: `Bearer ${localStorage.getItem('token')}`\n});\nexport const fetchTasks = async () => {\n  try {\n    const response = await fetch(API_URL, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) throw new Error('Erro ao carregar tarefas');\n    return await response.json();\n  } catch (error) {\n    console.error('Erro ao carregar tarefas:', error);\n    throw error;\n  }\n};\nexport const completeTask = async taskId => {\n  try {\n    const response = await fetch(`${API_URL}${taskId}/complete`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        ...getAuthHeaders()\n      }\n    });\n    if (!response.ok) throw new Error('Erro ao marcar tarefa como concluída');\n    return await response.json();\n  } catch (error) {\n    console.error('Erro ao marcar tarefa como concluída:', error);\n    throw error;\n  }\n};\nexport const updateTask = async task => {\n  try {\n    const response = await fetch(`${API_URL}${task.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        ...getAuthHeaders()\n      },\n      body: JSON.stringify(task)\n    });\n    if (!response.ok) throw new Error('Erro ao atualizar tarefa');\n    return await response.json();\n  } catch (error) {\n    console.error('Erro ao atualizar tarefa:', error);\n    throw error;\n  }\n};\nexport const deleteTask = async taskId => {\n  try {\n    const response = await fetch(`${API_URL}${taskId}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) throw new Error('Erro ao excluir tarefa');\n    return await response.json();\n  } catch (error) {\n    console.error('Erro ao excluir tarefa:', error);\n    throw error;\n  }\n};\nexport const createTask = async newTask => {\n  try {\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...getAuthHeaders()\n      },\n      body: JSON.stringify(newTask)\n    });\n    if (!response.ok) throw new Error('Erro ao criar tarefa');\n    return await response.json();\n  } catch (error) {\n    console.error('Erro ao criar tarefa:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","getAuthHeaders","Authorization","localStorage","getItem","fetchTasks","response","fetch","headers","ok","Error","json","error","console","completeTask","taskId","method","updateTask","task","id","body","JSON","stringify","deleteTask","createTask","newTask"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/components/Tasks/api.js"],"sourcesContent":["// api.js\nconst API_URL = 'http://localhost:5000/api/tasks/';\n\nconst getAuthHeaders = () => ({\n  Authorization: `Bearer ${localStorage.getItem('token')}`,\n});\n\nexport const fetchTasks = async () => {\n  try {\n    const response = await fetch(API_URL, { headers: getAuthHeaders() });\n    if (!response.ok) throw new Error('Erro ao carregar tarefas');\n    return await response.json();\n  } catch (error) {\n    console.error('Erro ao carregar tarefas:', error);\n    throw error;\n  }\n};\n\nexport const completeTask = async (taskId) => {\n  try {\n    const response = await fetch(`${API_URL}${taskId}/complete`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        ...getAuthHeaders(),\n      },\n    });\n    if (!response.ok) throw new Error('Erro ao marcar tarefa como concluída');\n    return await response.json();\n  } catch (error) {\n    console.error('Erro ao marcar tarefa como concluída:', error);\n    throw error;\n  }\n};\n\nexport const updateTask = async (task) => {\n  try {\n    const response = await fetch(`${API_URL}${task.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        ...getAuthHeaders(),\n      },\n      body: JSON.stringify(task),\n    });\n    if (!response.ok) throw new Error('Erro ao atualizar tarefa');\n    return await response.json();\n  } catch (error) {\n    console.error('Erro ao atualizar tarefa:', error);\n    throw error;\n  }\n};\n\nexport const deleteTask = async (taskId) => {\n  try {\n    const response = await fetch(`${API_URL}${taskId}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Erro ao excluir tarefa');\n    return await response.json();\n  } catch (error) {\n    console.error('Erro ao excluir tarefa:', error);\n    throw error;\n  }\n};\n\nexport const createTask = async (newTask) => {\n  try {\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...getAuthHeaders(),\n      },\n      body: JSON.stringify(newTask),\n    });\n    if (!response.ok) throw new Error('Erro ao criar tarefa');\n    return await response.json();\n  } catch (error) {\n    console.error('Erro ao criar tarefa:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}