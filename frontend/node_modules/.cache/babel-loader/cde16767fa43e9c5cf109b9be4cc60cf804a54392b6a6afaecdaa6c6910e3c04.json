{"ast":null,"code":"var _s = $RefreshSig$();\n// useAuth.js\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport jwtDecode from 'jwt-decode';\nexport const useAuth = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\n  const [name, setName] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (token) {\n      try {\n        // Decodifica o token para obter o nome de usu치rio\n        const decodedToken = jwtDecode(token);\n        setName(decodedToken.username || 'Usu치rio');\n      } catch (error) {\n        console.error('Erro ao decodificar o token', error);\n      }\n    }\n  }, [token]);\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Erro ao fazer login');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setToken(data.token);\n      navigate(`/tasks/${encodeURIComponent(name)}`);\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao fazer login:', err);\n    }\n  };\n  const register = async (username, fullName, email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          fullName,\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Erro ao registrar');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setToken(data.token);\n      navigate(`/tasks/${encodeURIComponent(username)}`);\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao registrar:', err);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken('');\n    setName('');\n    navigate('/login');\n  };\n  return {\n    login,\n    register,\n    logout,\n    error,\n    token,\n    name\n  };\n};\n_s(useAuth, \"HU3ookFBLzyjEidm2R2nHCVMNeQ=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useState","useEffect","useNavigate","jwtDecode","useAuth","_s","error","setError","token","setToken","localStorage","getItem","name","setName","navigate","decodedToken","username","console","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","setItem","encodeURIComponent","err","message","register","fullName","errorData","logout","removeItem"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/hooks/useAuth.js"],"sourcesContent":["// useAuth.js\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport jwtDecode from 'jwt-decode';\n\nexport const useAuth = () => {\n  const [error, setError] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\n  const [name, setName] = useState('');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (token) {\n      try {\n        // Decodifica o token para obter o nome de usu치rio\n        const decodedToken = jwtDecode(token);\n        setName(decodedToken.username || 'Usu치rio');\n      } catch (error) {\n        console.error('Erro ao decodificar o token', error);\n      }\n    }\n  }, [token]);\n\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Erro ao fazer login');\n      }\n\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setToken(data.token);\n      navigate(`/tasks/${encodeURIComponent(name)}`);\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao fazer login:', err);\n    }\n  };\n\n  const register = async (username, fullName, email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, fullName, email, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Erro ao registrar');\n      }\n\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setToken(data.token);\n      navigate(`/tasks/${encodeURIComponent(username)}`);\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao registrar:', err);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken('');\n    setName('');\n    navigate('/login');\n  };\n\n  return { login, register, logout, error, token, name };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}