{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode'; // Verifique se você tem o pacote jwt-decode instalado\n\nexport const useAuth = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\n  const [userInfo, setUserInfo] = useState({\n    username: '',\n    email: '',\n    fullName: '',\n    createdAt: ''\n  });\n  const [isVerificAuth, setIsVerificAuth] = useState(false);\n  const navigate = useNavigate();\n\n  // Função para verificar o status de autenticação\n  const checkAuth = () => {\n    if (token) {\n      try {\n        const decodedToken = jwtDecode(token);\n        // Verifica se o token expirou (assumindo que `exp` está em segundos)\n        if (decodedToken.exp * 1000 < Date.now()) {\n          throw new Error('Token expirado');\n        }\n        setUserInfo({\n          username: decodedToken.username || '',\n          email: decodedToken.email || '',\n          fullName: decodedToken.fullName || '',\n          createdAt: decodedToken.createdAt || ''\n        });\n        setIsVerificAuth(true);\n      } catch (error) {\n        console.error('Erro ao decodificar ou verificar o token', error);\n        logout(); // Chama logout para limpar estado se o token for inválido\n      }\n    } else {\n      setUserInfo({\n        username: '',\n        email: '',\n        fullName: '',\n        createdAt: ''\n      });\n      setIsVerificAuth(false);\n    }\n  };\n\n  // Executa checkAuth ao montar o componente ou quando o token mudar\n  useEffect(() => {\n    checkAuth();\n  }, [token]);\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Erro ao fazer login');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setToken(data.token);\n      checkAuth(); // Verifica a autenticação imediatamente após o login\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao fazer login:', err);\n    }\n  };\n  const register = async (username, fullName, email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          fullName,\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Erro ao registrar');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setToken(data.token);\n      checkAuth(); // Verifica a autenticação imediatamente após o registro\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao registrar:', err);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken('');\n    setUserInfo({\n      username: '',\n      email: '',\n      fullName: '',\n      createdAt: ''\n    });\n    setIsVerificAuth(false);\n    navigate('/login');\n  };\n  return {\n    login,\n    register,\n    logout,\n    error,\n    token,\n    userInfo,\n    isVerificAuth\n  };\n};\n_s(useAuth, \"4AmzedPHjf3oT+GOS9soyYoV7wA=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useState","useEffect","useNavigate","jwtDecode","useAuth","_s","error","setError","token","setToken","localStorage","getItem","userInfo","setUserInfo","username","email","fullName","createdAt","isVerificAuth","setIsVerificAuth","navigate","checkAuth","decodedToken","exp","Date","now","Error","console","logout","login","password","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","message","data","setItem","err","register","removeItem"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode'; // Verifique se você tem o pacote jwt-decode instalado\n\nexport const useAuth = () => {\n  const [error, setError] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\n  const [userInfo, setUserInfo] = useState({\n    username: '',\n    email: '',\n    fullName: '',\n    createdAt: '',\n  });\n  const [isVerificAuth, setIsVerificAuth] = useState(false);\n  const navigate = useNavigate();\n\n  // Função para verificar o status de autenticação\n  const checkAuth = () => {\n    if (token) {\n      try {\n        const decodedToken = jwtDecode(token);\n        // Verifica se o token expirou (assumindo que `exp` está em segundos)\n        if (decodedToken.exp * 1000 < Date.now()) {\n          throw new Error('Token expirado');\n        }\n        setUserInfo({\n          username: decodedToken.username || '',\n          email: decodedToken.email || '',\n          fullName: decodedToken.fullName || '',\n          createdAt: decodedToken.createdAt || '',\n        });\n        setIsVerificAuth(true);\n      } catch (error) {\n        console.error('Erro ao decodificar ou verificar o token', error);\n        logout(); // Chama logout para limpar estado se o token for inválido\n      }\n    } else {\n      setUserInfo({\n        username: '',\n        email: '',\n        fullName: '',\n        createdAt: '',\n      });\n      setIsVerificAuth(false);\n    }\n  };\n\n  // Executa checkAuth ao montar o componente ou quando o token mudar\n  useEffect(() => {\n    checkAuth();\n  }, [token]);\n\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Erro ao fazer login');\n      }\n\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setToken(data.token);\n      checkAuth(); // Verifica a autenticação imediatamente após o login\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao fazer login:', err);\n    }\n  };\n\n  const register = async (username, fullName, email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, fullName, email, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Erro ao registrar');\n      }\n\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      setToken(data.token);\n      checkAuth(); // Verifica a autenticação imediatamente após o registro\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao registrar:', err);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken('');\n    setUserInfo({\n      username: '',\n      email: '',\n      fullName: '',\n      createdAt: '',\n    });\n    setIsVerificAuth(false);\n    navigate('/login');\n  };\n\n  return { login, register, logout, error, token, userInfo, isVerificAuth };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}