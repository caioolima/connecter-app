{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useUserInfo = username => {\n  _s();\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [createdAt, setCreatedAt] = useState('');\n  useEffect(() => {\n    const fetchUserInfo = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/users/user/${username}`);\n        if (response.ok) {\n          const data = await response.json();\n          setFullName(data.fullName || 'Nome completo não disponível');\n          setEmail(data.email || 'Email não disponível');\n          setCreatedAt(formatDate(data.createdAt) || 'Data não disponível');\n        } else {\n          console.error('Erro ao carregar informações do usuário:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Erro ao carregar informações do usuário:', error);\n      }\n    };\n    fetchUserInfo();\n  }, [username]);\n\n  // Extraindo o primeiro nome\n  const firstName = fullName ? fullName.split(' ')[0] : 'Nome não disponível';\n  return {\n    firstName,\n    fullName,\n    email,\n    createdAt\n  };\n};\n_s(useUserInfo, \"BKEjN6WxHmaDtrZ/ZOOg/XB1JU4=\");\nconst formatDate = dateString => {\n  const options = {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric'\n  };\n  return new Date(dateString).toLocaleDateString('pt-BR', options);\n};\nexport default useUserInfo;","map":{"version":3,"names":["useState","useEffect","useUserInfo","username","_s","fullName","setFullName","email","setEmail","createdAt","setCreatedAt","fetchUserInfo","response","fetch","ok","data","json","formatDate","console","error","statusText","firstName","split","dateString","options","day","month","year","Date","toLocaleDateString"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/hooks/Tasks/useUserInfo.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useUserInfo = (username) => {\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [createdAt, setCreatedAt] = useState('');\n\n  useEffect(() => {\n    const fetchUserInfo = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/users/user/${username}`);\n        if (response.ok) {\n          const data = await response.json();\n          setFullName(data.fullName || 'Nome completo não disponível');\n          setEmail(data.email || 'Email não disponível');\n          setCreatedAt(formatDate(data.createdAt) || 'Data não disponível');\n        } else {\n          console.error('Erro ao carregar informações do usuário:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Erro ao carregar informações do usuário:', error);\n      }\n    };\n\n    fetchUserInfo();\n  }, [username]);\n\n  // Extraindo o primeiro nome\n  const firstName = fullName ? fullName.split(' ')[0] : 'Nome não disponível';\n\n  return { firstName, fullName, email, createdAt };\n};\n\nconst formatDate = (dateString) => {\n  const options = { day: '2-digit', month: '2-digit', year: 'numeric' };\n  return new Date(dateString).toLocaleDateString('pt-BR', options);\n};\n\nexport default useUserInfo;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,WAAW,GAAIC,QAAQ,IAAK;EAAAC,EAAA;EAChC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAMU,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwCV,QAAQ,EAAE,CAAC;QAChF,IAAIS,QAAQ,CAACE,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UAClCV,WAAW,CAACS,IAAI,CAACV,QAAQ,IAAI,8BAA8B,CAAC;UAC5DG,QAAQ,CAACO,IAAI,CAACR,KAAK,IAAI,sBAAsB,CAAC;UAC9CG,YAAY,CAACO,UAAU,CAACF,IAAI,CAACN,SAAS,CAAC,IAAI,qBAAqB,CAAC;QACnE,CAAC,MAAM;UACLS,OAAO,CAACC,KAAK,CAAC,0CAA0C,EAAEP,QAAQ,CAACQ,UAAU,CAAC;QAChF;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAClE;IACF,CAAC;IAEDR,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACR,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMkB,SAAS,GAAGhB,QAAQ,GAAGA,QAAQ,CAACiB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,qBAAqB;EAE3E,OAAO;IAAED,SAAS;IAAEhB,QAAQ;IAAEE,KAAK;IAAEE;EAAU,CAAC;AAClD,CAAC;AAACL,EAAA,CA7BIF,WAAW;AA+BjB,MAAMe,UAAU,GAAIM,UAAU,IAAK;EACjC,MAAMC,OAAO,GAAG;IAAEC,GAAG,EAAE,SAAS;IAAEC,KAAK,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAU,CAAC;EACrE,OAAO,IAAIC,IAAI,CAACL,UAAU,CAAC,CAACM,kBAAkB,CAAC,OAAO,EAAEL,OAAO,CAAC;AAClE,CAAC;AAED,eAAetB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}