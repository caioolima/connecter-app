{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useAuth.js\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport jwtDecode from 'jwt-decode';\nexport const useAuth = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Erro ao fazer login');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n\n      // Decodifica o token para obter o nome do usu치rio\n      const decodedToken = jwtDecode(data.token);\n      const userName = decodedToken.name || 'Usu치rio';\n      navigate(`/tasks/${encodeURIComponent(userName)}`);\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao fazer login:', err);\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Erro ao registrar');\n      }\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      navigate(`/tasks/${encodeURIComponent(name)}`);\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao registrar:', err);\n    }\n  };\n  return {\n    login,\n    register,\n    error\n  };\n};\n_s(useAuth, \"rpbPklOf4toI5u/2rQsGlXHhdoI=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useState","useNavigate","jwtDecode","useAuth","_s","error","setError","navigate","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","localStorage","setItem","token","decodedToken","userName","name","encodeURIComponent","err","message","console","register","errorData"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/hooks/useAuth.js"],"sourcesContent":["// src/hooks/useAuth.js\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport jwtDecode from 'jwt-decode';\n\nexport const useAuth = () => {\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Erro ao fazer login');\n      }\n\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n\n      // Decodifica o token para obter o nome do usu치rio\n      const decodedToken = jwtDecode(data.token);\n      const userName = decodedToken.name || 'Usu치rio';\n\n      navigate(`/tasks/${encodeURIComponent(userName)}`);\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao fazer login:', err);\n    }\n  };\n\n  const register = async (name, email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name, email, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Erro ao registrar');\n      }\n\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      navigate(`/tasks/${encodeURIComponent(name)}`);\n    } catch (err) {\n      setError(err.message);\n      console.error('Erro ao registrar:', err);\n    }\n  };\n\n  return { login, register, error };\n};\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,SAAS,MAAM,YAAY;AAElC,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMO,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAE9B,MAAMO,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;QACpEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;MACxC;MAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;;MAEzC;MACA,MAAMC,YAAY,GAAGvB,SAAS,CAACkB,IAAI,CAACI,KAAK,CAAC;MAC1C,MAAME,QAAQ,GAAGD,YAAY,CAACE,IAAI,IAAI,SAAS;MAE/CpB,QAAQ,CAAC,UAAUqB,kBAAkB,CAACF,QAAQ,CAAC,EAAE,CAAC;IACpD,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZvB,QAAQ,CAACuB,GAAG,CAACC,OAAO,CAAC;MACrBC,OAAO,CAAC1B,KAAK,CAAC,sBAAsB,EAAEwB,GAAG,CAAC;IAC5C;EACF,CAAC;EAED,MAAMG,QAAQ,GAAG,MAAAA,CAAOL,IAAI,EAAElB,KAAK,EAAEC,QAAQ,KAAK;IAChD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;QACvEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEU,IAAI;UAAElB,KAAK;UAAEC;QAAS,CAAC;MAChD,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAMe,SAAS,GAAG,MAAMtB,QAAQ,CAACU,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIF,KAAK,CAACc,SAAS,CAACH,OAAO,IAAI,mBAAmB,CAAC;MAC3D;MAEA,MAAMV,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;MACzCjB,QAAQ,CAAC,UAAUqB,kBAAkB,CAACD,IAAI,CAAC,EAAE,CAAC;IAChD,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZvB,QAAQ,CAACuB,GAAG,CAACC,OAAO,CAAC;MACrBC,OAAO,CAAC1B,KAAK,CAAC,oBAAoB,EAAEwB,GAAG,CAAC;IAC1C;EACF,CAAC;EAED,OAAO;IAAErB,KAAK;IAAEwB,QAAQ;IAAE3B;EAAM,CAAC;AACnC,CAAC;AAACD,EAAA,CAzDWD,OAAO;EAAA,QAEDF,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}