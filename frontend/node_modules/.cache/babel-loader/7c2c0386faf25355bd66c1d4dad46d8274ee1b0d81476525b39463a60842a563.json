{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Hook personalizado para buscar e gerenciar informações do usuário\nconst useUserInfo = username => {\n  _s();\n  // Estados para armazenar as informações do usuário e o status de carregamento e erro\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [createdAt, setCreatedAt] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const navigate = useNavigate(); // Hook para navegação entre páginas\n\n  useEffect(() => {\n    // Função assíncrona para buscar as informações do usuário\n    const fetchUserInfo = async () => {\n      try {\n        const response = await fetch(`https://connecter-app-production.up.railway.app/api/users/user/${username}`);\n        if (response.ok) {\n          const data = await response.json();\n          if (data) {\n            // Atualiza os estados com as informações do usuário ou valores padrão\n            setFullName(data.fullName || 'Nome completo não disponível');\n            setEmail(data.email || 'Email não disponível');\n            setCreatedAt(formatDate(data.createdAt) || 'Data não disponível');\n          } else {\n            setError(true); // Define erro se não houver dados\n          }\n        } else {\n          setError(true); // Define erro se a resposta não for bem-sucedida\n        }\n      } catch (error) {\n        setError(true); // Define erro se houver uma exceção\n      } finally {\n        setLoading(false); // Define loading como false após a tentativa de busca\n      }\n    };\n    fetchUserInfo(); // Chama a função para buscar as informações do usuário\n  }, [username]); // Reexecuta o efeito se o username mudar\n\n  useEffect(() => {\n    if (error) {\n      navigate('/error'); // Redireciona para a página de erro se houver um erro\n    }\n  }, [error, navigate]); // Reexecuta o efeito se o erro mudar\n\n  // Função para obter o primeiro nome do usuário\n  const firstName = fullName ? fullName.split(' ')[0] : 'Nome não disponível';\n  return {\n    firstName,\n    fullName,\n    email,\n    createdAt,\n    loading,\n    error\n  };\n};\n\n// Função para formatar a data no formato DD/MM/AAAA\n_s(useUserInfo, \"+WPViLRY1ON+/Hj2lFNERAzX2fE=\", false, function () {\n  return [useNavigate];\n});\nconst formatDate = dateString => {\n  const options = {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric'\n  };\n  return new Date(dateString).toLocaleDateString('pt-BR', options);\n};\nexport default useUserInfo;","map":{"version":3,"names":["useState","useEffect","useNavigate","useUserInfo","username","_s","fullName","setFullName","email","setEmail","createdAt","setCreatedAt","loading","setLoading","error","setError","navigate","fetchUserInfo","response","fetch","ok","data","json","formatDate","firstName","split","dateString","options","day","month","year","Date","toLocaleDateString"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/hooks/Tasks Hooks/useUserInfo.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Hook personalizado para buscar e gerenciar informações do usuário\nconst useUserInfo = (username) => {\n  // Estados para armazenar as informações do usuário e o status de carregamento e erro\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [createdAt, setCreatedAt] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  const navigate = useNavigate(); // Hook para navegação entre páginas\n\n  useEffect(() => {\n    // Função assíncrona para buscar as informações do usuário\n    const fetchUserInfo = async () => {\n      try {\n        const response = await fetch(`https://connecter-app-production.up.railway.app/api/users/user/${username}`);\n        if (response.ok) {\n          const data = await response.json();\n          if (data) {\n            // Atualiza os estados com as informações do usuário ou valores padrão\n            setFullName(data.fullName || 'Nome completo não disponível');\n            setEmail(data.email || 'Email não disponível');\n            setCreatedAt(formatDate(data.createdAt) || 'Data não disponível');\n          } else {\n            setError(true); // Define erro se não houver dados\n          }\n        } else {\n          setError(true); // Define erro se a resposta não for bem-sucedida\n        }\n      } catch (error) {\n        setError(true); // Define erro se houver uma exceção\n      } finally {\n        setLoading(false); // Define loading como false após a tentativa de busca\n      }\n    };\n\n    fetchUserInfo(); // Chama a função para buscar as informações do usuário\n  }, [username]); // Reexecuta o efeito se o username mudar\n\n  useEffect(() => {\n    if (error) {\n      navigate('/error'); // Redireciona para a página de erro se houver um erro\n    }\n  }, [error, navigate]); // Reexecuta o efeito se o erro mudar\n\n  // Função para obter o primeiro nome do usuário\n  const firstName = fullName ? fullName.split(' ')[0] : 'Nome não disponível';\n\n  return { firstName, fullName, email, createdAt, loading, error };\n};\n\n// Função para formatar a data no formato DD/MM/AAAA\nconst formatDate = (dateString) => {\n  const options = { day: '2-digit', month: '2-digit', year: 'numeric' };\n  return new Date(dateString).toLocaleDateString('pt-BR', options);\n};\n\nexport default useUserInfo;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,WAAW,GAAIC,QAAQ,IAAK;EAAAC,EAAA;EAChC;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAEzC,MAAMgB,QAAQ,GAAGd,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhCD,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kEAAkEf,QAAQ,EAAE,CAAC;QAC1G,IAAIc,QAAQ,CAACE,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UAClC,IAAID,IAAI,EAAE;YACR;YACAd,WAAW,CAACc,IAAI,CAACf,QAAQ,IAAI,8BAA8B,CAAC;YAC5DG,QAAQ,CAACY,IAAI,CAACb,KAAK,IAAI,sBAAsB,CAAC;YAC9CG,YAAY,CAACY,UAAU,CAACF,IAAI,CAACX,SAAS,CAAC,IAAI,qBAAqB,CAAC;UACnE,CAAC,MAAM;YACLK,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;UAClB;QACF,CAAC,MAAM;UACLA,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QAClB;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;MAClB,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;IAEDI,aAAa,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,EAAE,CAACb,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhBH,SAAS,CAAC,MAAM;IACd,IAAIa,KAAK,EAAE;MACTE,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;IACtB;EACF,CAAC,EAAE,CAACF,KAAK,EAAEE,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEvB;EACA,MAAMQ,SAAS,GAAGlB,QAAQ,GAAGA,QAAQ,CAACmB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,qBAAqB;EAE3E,OAAO;IAAED,SAAS;IAAElB,QAAQ;IAAEE,KAAK;IAAEE,SAAS;IAAEE,OAAO;IAAEE;EAAM,CAAC;AAClE,CAAC;;AAED;AAAAT,EAAA,CAlDMF,WAAW;EAAA,QAQED,WAAW;AAAA;AA2C9B,MAAMqB,UAAU,GAAIG,UAAU,IAAK;EACjC,MAAMC,OAAO,GAAG;IAAEC,GAAG,EAAE,SAAS;IAAEC,KAAK,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAU,CAAC;EACrE,OAAO,IAAIC,IAAI,CAACL,UAAU,CAAC,CAACM,kBAAkB,CAAC,OAAO,EAAEL,OAAO,CAAC;AAClE,CAAC;AAED,eAAexB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}