{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useTasks.js\nimport { useState } from 'react';\nexport const useTasks = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const fetchTasks = async (isAuthenticated, username, token) => {\n    try {\n      const apiUrl = isAuthenticated ? `http://localhost:5000/api/tasks/` : `http://localhost:5000/api/tasks/task/user/${encodeURIComponent(username)}`;\n      const response = await fetch(apiUrl, {\n        headers: isAuthenticated ? {\n          Authorization: `Bearer ${token}`\n        } : {}\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setTasks(data);\n      } else {\n        console.error('Erro ao carregar tarefas:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Erro ao carregar tarefas:', error);\n    }\n  };\n  const handleViewTask = (task, isAuthenticated, setShowLoginModal) => {\n    if (isAuthenticated) {\n      setTasks(prev => ({\n        ...prev,\n        selectedTask: task\n      }));\n    } else {\n      setShowLoginModal(true);\n    }\n  };\n  return {\n    tasks,\n    fetchTasks,\n    handleViewTask\n  };\n};\n_s(useTasks, \"+34uIVDBalDkucWnJ7Aj1Xxb0MA=\");","map":{"version":3,"names":["useState","useTasks","_s","tasks","setTasks","fetchTasks","isAuthenticated","username","token","apiUrl","encodeURIComponent","response","fetch","headers","Authorization","ok","data","json","console","error","statusText","handleViewTask","task","setShowLoginModal","prev","selectedTask"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/hooks/useTasks.js"],"sourcesContent":["// src/hooks/useTasks.js\nimport { useState } from 'react';\n\nexport const useTasks = () => {\n  const [tasks, setTasks] = useState([]);\n\n  const fetchTasks = async (isAuthenticated, username, token) => {\n    try {\n      const apiUrl = isAuthenticated \n        ? `http://localhost:5000/api/tasks/` \n        : `http://localhost:5000/api/tasks/task/user/${encodeURIComponent(username)}`;\n\n      const response = await fetch(apiUrl, {\n        headers: isAuthenticated ? { Authorization: `Bearer ${token}` } : {},\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setTasks(data);\n      } else {\n        console.error('Erro ao carregar tarefas:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Erro ao carregar tarefas:', error);\n    }\n  };\n\n  const handleViewTask = (task, isAuthenticated, setShowLoginModal) => {\n    if (isAuthenticated) {\n      setTasks((prev) => ({ ...prev, selectedTask: task }));\n    } else {\n      setShowLoginModal(true);\n    }\n  };\n\n  return { tasks, fetchTasks, handleViewTask };\n};\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMK,UAAU,GAAG,MAAAA,CAAOC,eAAe,EAAEC,QAAQ,EAAEC,KAAK,KAAK;IAC7D,IAAI;MACF,MAAMC,MAAM,GAAGH,eAAe,GAC1B,kCAAkC,GAClC,6CAA6CI,kBAAkB,CAACH,QAAQ,CAAC,EAAE;MAE/E,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,MAAM,EAAE;QACnCI,OAAO,EAAEP,eAAe,GAAG;UAAEQ,aAAa,EAAE,UAAUN,KAAK;QAAG,CAAC,GAAG,CAAC;MACrE,CAAC,CAAC;MAEF,IAAIG,QAAQ,CAACI,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClCb,QAAQ,CAACY,IAAI,CAAC;MAChB,CAAC,MAAM;QACLE,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAER,QAAQ,CAACS,UAAU,CAAC;MACjE;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,MAAME,cAAc,GAAGA,CAACC,IAAI,EAAEhB,eAAe,EAAEiB,iBAAiB,KAAK;IACnE,IAAIjB,eAAe,EAAE;MACnBF,QAAQ,CAAEoB,IAAI,KAAM;QAAE,GAAGA,IAAI;QAAEC,YAAY,EAAEH;MAAK,CAAC,CAAC,CAAC;IACvD,CAAC,MAAM;MACLC,iBAAiB,CAAC,IAAI,CAAC;IACzB;EACF,CAAC;EAED,OAAO;IAAEpB,KAAK;IAAEE,UAAU;IAAEgB;EAAe,CAAC;AAC9C,CAAC;AAACnB,EAAA,CAjCWD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}