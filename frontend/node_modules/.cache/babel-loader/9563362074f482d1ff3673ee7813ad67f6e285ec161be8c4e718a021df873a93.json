{"ast":null,"code":"var _jsxFileName = \"/Users/devcosta/Documents/task-manager/frontend-task/src/pages/TasksPage.js\",\n  _s = $RefreshSig$();\n// TasksPage.js\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TasksPage = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Checa se o token existe no localStorage para determinar se o usuário está autenticado\n    const token = localStorage.getItem('token');\n    setIsAuthenticated(!!token);\n\n    // Fetch tasks from the API (you might need to modify this URL or the fetch logic)\n    const fetchTasks = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/tasks', {\n          headers: {\n            'Authorization': `Bearer ${token}` // Passa o token para requisição autenticada\n          }\n        });\n        const data = await response.json();\n        setTasks(data);\n      } catch (error) {\n        console.error('Erro ao carregar tarefas:', error);\n      }\n    };\n    fetchTasks();\n  }, []);\n  const handleAction = () => {\n    if (!isAuthenticated) {\n      alert('Você precisa estar logado para realizar essa ação.');\n      navigate('/login'); // Opcional: Redireciona para o login se tentar executar uma ação\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Suas Tarefas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [task.name, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAction,\n          disabled: !isAuthenticated,\n          children: \"Editar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(TasksPage, \"YQIBiNNfmMPec6ZDri47gVgJaPk=\", false, function () {\n  return [useNavigate];\n});\n_c = TasksPage;\nexport default TasksPage;\nvar _c;\n$RefreshReg$(_c, \"TasksPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","TasksPage","_s","tasks","setTasks","isAuthenticated","setIsAuthenticated","navigate","token","localStorage","getItem","fetchTasks","response","fetch","headers","data","json","error","console","handleAction","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","map","task","name","onClick","disabled","id","_c","$RefreshReg$"],"sources":["/Users/devcosta/Documents/task-manager/frontend-task/src/pages/TasksPage.js"],"sourcesContent":["// TasksPage.js\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst TasksPage = () => {\n  const [tasks, setTasks] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Checa se o token existe no localStorage para determinar se o usuário está autenticado\n    const token = localStorage.getItem('token');\n    setIsAuthenticated(!!token);\n    \n    // Fetch tasks from the API (you might need to modify this URL or the fetch logic)\n    const fetchTasks = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/tasks', {\n          headers: {\n            'Authorization': `Bearer ${token}`, // Passa o token para requisição autenticada\n          },\n        });\n        const data = await response.json();\n        setTasks(data);\n      } catch (error) {\n        console.error('Erro ao carregar tarefas:', error);\n      }\n    };\n\n    fetchTasks();\n  }, []);\n\n  const handleAction = () => {\n    if (!isAuthenticated) {\n      alert('Você precisa estar logado para realizar essa ação.');\n      navigate('/login'); // Opcional: Redireciona para o login se tentar executar uma ação\n    }\n  };\n\n  return (\n    <div>\n      <h1>Suas Tarefas</h1>\n      <ul>\n        {tasks.map((task) => (\n          <li key={task.id}>\n            {task.name}\n            {/* Ação desabilitada se o usuário não estiver autenticado */}\n            <button onClick={handleAction} disabled={!isAuthenticated}>\n              Editar\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TasksPage;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAMU,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3CJ,kBAAkB,CAAC,CAAC,CAACE,KAAK,CAAC;;IAE3B;IACA,MAAMG,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;UAC9DC,OAAO,EAAE;YACP,eAAe,EAAE,UAAUN,KAAK,EAAE,CAAE;UACtC;QACF,CAAC,CAAC;QACF,MAAMO,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCZ,QAAQ,CAACW,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAEDN,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAI,CAACd,eAAe,EAAE;MACpBe,KAAK,CAAC,oDAAoD,CAAC;MAC3Db,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;IACtB;EACF,CAAC;EAED,oBACEP,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBzB,OAAA;MAAAqB,QAAA,EACGlB,KAAK,CAACuB,GAAG,CAAEC,IAAI,iBACd3B,OAAA;QAAAqB,QAAA,GACGM,IAAI,CAACC,IAAI,eAEV5B,OAAA;UAAQ6B,OAAO,EAAEV,YAAa;UAACW,QAAQ,EAAE,CAACzB,eAAgB;UAAAgB,QAAA,EAAC;QAE3D;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GALFE,IAAI,CAACI,EAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACvB,EAAA,CAnDID,SAAS;EAAA,QAGIH,WAAW;AAAA;AAAAkC,EAAA,GAHxB/B,SAAS;AAqDf,eAAeA,SAAS;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}