{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '../../Context/AuthContext';\nconst useTasks = username => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [error, setError] = useState(null);\n  const {\n    token,\n    userInfo\n  } = useAuth();\n  useEffect(() => {\n    if (!username && !token) {\n      setError('Username ou token não definido.');\n      return;\n    }\n    const fetchTasks = async () => {\n      try {\n        let apiUrl;\n        console.log(username);\n        if (token) {\n          // Usuário autenticado\n          apiUrl = `http://localhost:5000/api/manager/tasks`;\n        } else if (username) {\n          // Usuário não autenticado, obter tarefas públicas\n          apiUrl = `http://localhost:5000/api/manager/public/tasks/${encodeURIComponent(username)}`;\n        } else {\n          throw new Error('Username necessário para acessar tarefas públicas.');\n        }\n        const response = await fetch(apiUrl, {\n          headers: token ? {\n            Authorization: `Bearer ${token}`\n          } : {}\n        });\n        if (response.ok) {\n          const data = await response.json();\n          const sortedTasks = data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n          const recentTasks = sortedTasks.slice(0, 9);\n          setTasks(recentTasks);\n        } else {\n          setError('Erro ao carregar tarefas');\n        }\n      } catch (error) {\n        setError(error.message || 'Erro ao carregar tarefas');\n      }\n    };\n    fetchTasks();\n  }, [username, token, userInfo.username]);\n  return {\n    tasks,\n    error\n  };\n};\n_s(useTasks, \"IX1c5AWncP5zlJ5K6u2UFWsofec=\", false, function () {\n  return [useAuth];\n});\nexport default useTasks;","map":{"version":3,"names":["useState","useEffect","useAuth","useTasks","username","_s","tasks","setTasks","error","setError","token","userInfo","fetchTasks","apiUrl","console","log","encodeURIComponent","Error","response","fetch","headers","Authorization","ok","data","json","sortedTasks","sort","a","b","Date","createdAt","recentTasks","slice","message"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/hooks/Tasks/useTasks.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useAuth } from '../../Context/AuthContext';\n\nconst useTasks = (username) => {\n  const [tasks, setTasks] = useState([]);\n  const [error, setError] = useState(null);\n  const { token, userInfo } = useAuth();\n\n  useEffect(() => {\n    if (!username && !token) {\n      setError('Username ou token não definido.');\n      return;\n    }\n\n    const fetchTasks = async () => {\n      try {\n        let apiUrl;\n        console.log(username)\n        if (token) {\n          // Usuário autenticado\n          apiUrl = `http://localhost:5000/api/manager/tasks`;\n        } else if (username) {\n          // Usuário não autenticado, obter tarefas públicas\n          apiUrl = `http://localhost:5000/api/manager/public/tasks/${encodeURIComponent(username)}`;\n        } else {\n          throw new Error('Username necessário para acessar tarefas públicas.');\n        }\n\n        const response = await fetch(apiUrl, {\n          headers: token ? { Authorization: `Bearer ${token}` } : {},\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          const sortedTasks = data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n          const recentTasks = sortedTasks.slice(0, 9);\n          setTasks(recentTasks);\n        } else {\n          setError('Erro ao carregar tarefas');\n        }\n      } catch (error) {\n        setError(error.message || 'Erro ao carregar tarefas');\n      }\n    };\n\n    fetchTasks();\n  }, [username, token, userInfo.username]);\n\n  return { tasks, error };\n};\n\nexport default useTasks;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,OAAO,QAAQ,2BAA2B;AAEnD,MAAMC,QAAQ,GAAIC,QAAQ,IAAK;EAAAC,EAAA;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM;IAAEU,KAAK;IAAEC;EAAS,CAAC,GAAGT,OAAO,CAAC,CAAC;EAErCD,SAAS,CAAC,MAAM;IACd,IAAI,CAACG,QAAQ,IAAI,CAACM,KAAK,EAAE;MACvBD,QAAQ,CAAC,iCAAiC,CAAC;MAC3C;IACF;IAEA,MAAMG,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,IAAIC,MAAM;QACVC,OAAO,CAACC,GAAG,CAACX,QAAQ,CAAC;QACrB,IAAIM,KAAK,EAAE;UACT;UACAG,MAAM,GAAG,yCAAyC;QACpD,CAAC,MAAM,IAAIT,QAAQ,EAAE;UACnB;UACAS,MAAM,GAAG,kDAAkDG,kBAAkB,CAACZ,QAAQ,CAAC,EAAE;QAC3F,CAAC,MAAM;UACL,MAAM,IAAIa,KAAK,CAAC,oDAAoD,CAAC;QACvE;QAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,MAAM,EAAE;UACnCO,OAAO,EAAEV,KAAK,GAAG;YAAEW,aAAa,EAAE,UAAUX,KAAK;UAAG,CAAC,GAAG,CAAC;QAC3D,CAAC,CAAC;QAEF,IAAIQ,QAAQ,CAACI,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;UAClC,MAAMC,WAAW,GAAGF,IAAI,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,GAAG,IAAID,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC,CAAC;UACtF,MAAMC,WAAW,GAAGN,WAAW,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;UAC3CzB,QAAQ,CAACwB,WAAW,CAAC;QACvB,CAAC,MAAM;UACLtB,QAAQ,CAAC,0BAA0B,CAAC;QACtC;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdC,QAAQ,CAACD,KAAK,CAACyB,OAAO,IAAI,0BAA0B,CAAC;MACvD;IACF,CAAC;IAEDrB,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACR,QAAQ,EAAEM,KAAK,EAAEC,QAAQ,CAACP,QAAQ,CAAC,CAAC;EAExC,OAAO;IAAEE,KAAK;IAAEE;EAAM,CAAC;AACzB,CAAC;AAACH,EAAA,CA9CIF,QAAQ;EAAA,QAGgBD,OAAO;AAAA;AA6CrC,eAAeC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}