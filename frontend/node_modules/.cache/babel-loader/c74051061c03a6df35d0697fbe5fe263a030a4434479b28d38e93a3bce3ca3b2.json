{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\n\n// Hook personalizado para gerenciar o estado de um menu suspenso (dropdown)\nconst useDropdownMenu = () => {\n  _s();\n  // Estado que indica se o menu está aberto ou fechado\n  const [isOpen, setIsOpen] = useState(false);\n  // Estado que armazena o item atualmente sobre o qual o mouse está passando\n  const [hoveredItem, setHoveredItem] = useState(null);\n  // Referência ao elemento do menu\n  const menuRef = useRef(null);\n\n  // Função para alternar o estado de abertura do menu\n  const handleToggle = () => setIsOpen(prev => !prev);\n\n  // Função para fechar o menu se um clique fora do menu for detectado\n  const handleClickOutside = event => {\n    if (menuRef.current && !menuRef.current.contains(event.target)) {\n      setIsOpen(false);\n    }\n  };\n\n  // Adiciona o ouvinte de evento para detectar cliques fora do menu\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      // Remove o ouvinte de evento quando o componente é desmontado\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // Função para definir o item atualmente sobre o qual o mouse está passando\n  const handleMouseEnter = item => setHoveredItem(item);\n  // Função para limpar o item sobre o qual o mouse estava passando\n  const handleMouseLeave = () => setHoveredItem(null);\n\n  // Retorna os estados e funções necessários para controlar o menu suspenso\n  return {\n    isOpen,\n    // Indica se o menu está aberto\n    hoveredItem,\n    // Armazena o item atualmente sobre o qual o mouse está passando\n    menuRef,\n    // Referência ao elemento do menu\n    handleToggle,\n    // Função para alternar o estado de abertura do menu\n    handleMouseEnter,\n    // Função para definir o item sobre o qual o mouse está passando\n    handleMouseLeave // Função para limpar o item sobre o qual o mouse estava passando\n  };\n};\n_s(useDropdownMenu, \"jkOPceQND9lC7FFMbtuhoY8MmEE=\");\nexport default useDropdownMenu;","map":{"version":3,"names":["useState","useEffect","useRef","useDropdownMenu","_s","isOpen","setIsOpen","hoveredItem","setHoveredItem","menuRef","handleToggle","prev","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","handleMouseEnter","item","handleMouseLeave"],"sources":["/Users/devcosta/Documents/task-manager/frontend/src/hooks/Manager Hooks/useDropdownMenu.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\n// Hook personalizado para gerenciar o estado de um menu suspenso (dropdown)\nconst useDropdownMenu = () => {\n  // Estado que indica se o menu está aberto ou fechado\n  const [isOpen, setIsOpen] = useState(false);\n  // Estado que armazena o item atualmente sobre o qual o mouse está passando\n  const [hoveredItem, setHoveredItem] = useState(null);\n  // Referência ao elemento do menu\n  const menuRef = useRef(null);\n\n  // Função para alternar o estado de abertura do menu\n  const handleToggle = () => setIsOpen(prev => !prev);\n\n  // Função para fechar o menu se um clique fora do menu for detectado\n  const handleClickOutside = (event) => {\n    if (menuRef.current && !menuRef.current.contains(event.target)) {\n      setIsOpen(false);\n    }\n  };\n\n  // Adiciona o ouvinte de evento para detectar cliques fora do menu\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      // Remove o ouvinte de evento quando o componente é desmontado\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // Função para definir o item atualmente sobre o qual o mouse está passando\n  const handleMouseEnter = (item) => setHoveredItem(item);\n  // Função para limpar o item sobre o qual o mouse estava passando\n  const handleMouseLeave = () => setHoveredItem(null);\n\n  // Retorna os estados e funções necessários para controlar o menu suspenso\n  return {\n    isOpen,              // Indica se o menu está aberto\n    hoveredItem,        // Armazena o item atualmente sobre o qual o mouse está passando\n    menuRef,            // Referência ao elemento do menu\n    handleToggle,       // Função para alternar o estado de abertura do menu\n    handleMouseEnter,   // Função para definir o item sobre o qual o mouse está passando\n    handleMouseLeave,   // Função para limpar o item sobre o qual o mouse estava passando\n  };\n};\n\nexport default useDropdownMenu;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;;AAEnD;AACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAC3C;EACA,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACpD;EACA,MAAMS,OAAO,GAAGP,MAAM,CAAC,IAAI,CAAC;;EAE5B;EACA,MAAMQ,YAAY,GAAGA,CAAA,KAAMJ,SAAS,CAACK,IAAI,IAAI,CAACA,IAAI,CAAC;;EAEnD;EACA,MAAMC,kBAAkB,GAAIC,KAAK,IAAK;IACpC,IAAIJ,OAAO,CAACK,OAAO,IAAI,CAACL,OAAO,CAACK,OAAO,CAACC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAAC,EAAE;MAC9DV,SAAS,CAAC,KAAK,CAAC;IAClB;EACF,CAAC;;EAED;EACAL,SAAS,CAAC,MAAM;IACdgB,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAEN,kBAAkB,CAAC;IAC1D,OAAO,MAAM;MACX;MACAK,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEP,kBAAkB,CAAC;IAC/D,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMQ,gBAAgB,GAAIC,IAAI,IAAKb,cAAc,CAACa,IAAI,CAAC;EACvD;EACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAMd,cAAc,CAAC,IAAI,CAAC;;EAEnD;EACA,OAAO;IACLH,MAAM;IAAe;IACrBE,WAAW;IAAS;IACpBE,OAAO;IAAa;IACpBC,YAAY;IAAQ;IACpBU,gBAAgB;IAAI;IACpBE,gBAAgB,CAAI;EACtB,CAAC;AACH,CAAC;AAAClB,EAAA,CAzCID,eAAe;AA2CrB,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}